
CREATE TABLE ADMIN
(
  admin_id       VARCHAR(255)  NOT NULL,
  admin_password VARCHAR2(255) NOT NULL,
  admin_rights   VARCHAR2(100) NOT NULL,
  CONSTRAINT PK_ADMIN PRIMARY KEY (admin_id)
);

COMMENT ON COLUMN ADMIN.admin_id IS '관리자 아이디';

COMMENT ON COLUMN ADMIN.admin_password IS '관리자 패스워드';

COMMENT ON COLUMN ADMIN.admin_rights IS '관리자 권한';

CREATE TABLE ALLERGY
(
  allergy_id   NUMBER       NOT NULL,
  allergy_name VARCHAR(255) NOT NULL,
  CONSTRAINT PK_ALLERGY PRIMARY KEY (allergy_id)
);

COMMENT ON COLUMN ALLERGY.allergy_id IS '알러지고유번호';

COMMENT ON COLUMN ALLERGY.allergy_name IS '알러지명';

CREATE TABLE ANSWER
(
  answer_seq_id   NUMBER       NOT NULL,
  question_seq_id NUMBER       NOT NULL,
  admin_id        VARCHAR(255) NOT NULL,
  content         NCLOB       ,
  modified_at     TIMESTAMP    NOT NULL,
  create_at       TIMESTAMP    NOT NULL,
  CONSTRAINT PK_ANSWER PRIMARY KEY (answer_seq_id)
);

CREATE SEQUENCE SEQ_ANSWER
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER SEQ_TRG_ANSWER
BEFORE INSERT ON ANSWER
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
  SELECT SEQ_ANSWER.NEXTVAL
  INTO: NEW.answer_seq_id
  FROM DUAL;
END;

COMMENT ON COLUMN ANSWER.answer_seq_id IS '답변고유번호(SEQ)';

COMMENT ON COLUMN ANSWER.question_seq_id IS '질문고유번호(SEQ)';

COMMENT ON COLUMN ANSWER.admin_id IS '관리자아이디';

COMMENT ON COLUMN ANSWER.content IS '답변내용';

COMMENT ON COLUMN ANSWER.modified_at IS '수정일시';

COMMENT ON COLUMN ANSWER.create_at IS '생성일시';

CREATE TABLE CART
(
  cart_seq_id    NUMBER         NOT NULL,
  product_id     NUMBER         NOT NULL,
  user_email     VARCHAR(255)   NOT NULL,
  delivery_fee   NUMBER        ,
  product_amount NUMBER        ,
  product_url    VARCHAR2(1000),
  product_img    VARCHAR2(1000),
  create_at      TIMESTAMP      NOT NULL,
  modified_at    TIMESTAMP      NOT NULL,
  CONSTRAINT PK_CART PRIMARY KEY (cart_seq_id)
);

CREATE SEQUENCE SEQ_CART
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER SEQ_TRG_CART
BEFORE INSERT ON CART
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
  SELECT SEQ_CART.NEXTVAL
  INTO: NEW.cart_seq_id
  FROM DUAL;
END;

COMMENT ON COLUMN CART.cart_seq_id IS '장바구니고유번호(SEQ)';

COMMENT ON COLUMN CART.product_id IS '상품고유번호';

COMMENT ON COLUMN CART.user_email IS '유저이메일(아이디)';

COMMENT ON COLUMN CART.delivery_fee IS '배송요금';

COMMENT ON COLUMN CART.product_amount IS '상품수량';

COMMENT ON COLUMN CART.product_url IS '상품경로';

COMMENT ON COLUMN CART.product_img IS '상품이미지';

COMMENT ON COLUMN CART.create_at IS '생성일시';

COMMENT ON COLUMN CART.modified_at IS '수정일시';

CREATE TABLE CLIENT
(
  business_number    VARCHAR(100)  NOT NULL,
  client_password    VARCHAR(100)  NOT NULL,
  client_name        VARCHAR(100)  NOT NULL,
  client_phone1      VARCHAR(100)  NOT NULL,
  client_phone2      VARCHAR(100)  NOT NULL,
  client_email       VARCHAR(200)  NOT NULL,
  client_address1    VARCHAR(1000) NOT NULL,
  client_address2    VARCHAR(1000) NOT NULL,
  client_post_code   VARCHAR(20)   NOT NULL,
  clame_num          NUMBER        NOT NULL,
  account_activation CHAR(1)       DEFAULT 'T' NOT NULL,
  client_profile_url NCLOB        ,
  CONSTRAINT PK_CLIENT PRIMARY KEY (business_number)
);

COMMENT ON COLUMN CLIENT.business_number IS '사업자등록번호';

COMMENT ON COLUMN CLIENT.client_password IS '비밀번호';

COMMENT ON COLUMN CLIENT.client_name IS '상호명';

COMMENT ON COLUMN CLIENT.client_phone1 IS '사업장전화번호';

COMMENT ON COLUMN CLIENT.client_phone2 IS '휴대전화번호';

COMMENT ON COLUMN CLIENT.client_email IS '이메일';

COMMENT ON COLUMN CLIENT.client_address1 IS '기본주소';

COMMENT ON COLUMN CLIENT.client_address2 IS '상세주소';

COMMENT ON COLUMN CLIENT.client_post_code IS '우편번호';

COMMENT ON COLUMN CLIENT.clame_num IS '클레임받은횟수';

COMMENT ON COLUMN CLIENT.account_activation IS '계정활성화';

CREATE TABLE CLIENT_COMMENT_REPLY
(
  client_comment_id NUMBER       NOT NULL,
  business_number   VARCHAR(100) NOT NULL,
  CONSTRAINT PK_CLIENT_COMMENT_REPLY PRIMARY KEY (client_comment_id)
);

CREATE SEQUENCE SEQ_CLIENT_COMMENT_REPLY
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER SEQ_TRG_CLIENT_COMMENT_REPLY
BEFORE INSERT ON CLIENT_COMMENT_REPLY
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
  SELECT SEQ_CLIENT_COMMENT_REPLY.NEXTVAL
  INTO: NEW.client_comment_id
  FROM DUAL;
END;

COMMENT ON COLUMN CLIENT_COMMENT_REPLY.business_number IS '사업자등록번호';

CREATE TABLE COMMON_USER
(
  user_email    VARCHAR(255)  NOT NULL,
  user_name     VARCHAR2(255) NOT NULL,
  user_password VARCHAR2(255) NOT NULL
);

COMMENT ON COLUMN COMMON_USER.user_email IS '유저이메일';

COMMENT ON COLUMN COMMON_USER.user_name IS '유저이름';

COMMENT ON COLUMN COMMON_USER.user_password IS '패스워드';

CREATE TABLE GOOGLE
(
  google_token VARCHAR(100) NOT NULL,
  user_email   VARCHAR(255) NOT NULL
);

COMMENT ON COLUMN GOOGLE.google_token IS '구글아이디';

COMMENT ON COLUMN GOOGLE.user_email IS '유저이메일';

CREATE TABLE KAKAO
(
  kakao_token VARCHAR(100) NOT NULL,
  user_email  VARCHAR(255) NOT NULL
);

COMMENT ON COLUMN KAKAO.kakao_token IS '카카오아이디';

COMMENT ON COLUMN KAKAO.user_email IS '유저이메일';

CREATE TABLE NAVER
(
  naver_token VARCHAR(100) NOT NULL,
  user_email  VARCHAR(255) NOT NULL
);

COMMENT ON COLUMN NAVER.naver_token IS '네이버아이디';

COMMENT ON COLUMN NAVER.user_email IS '유저이메일';

CREATE TABLE NOTIFITION
(
  notifition_seq_id  NUMBER       NOT NULL,
  admin_id           VARCHAR(255) NOT NULL,
  notifition_title   VARCHAR(200) NOT NULL,
  notifition_content NCLOB        NOT NULL,
  created_at         TIMESTAMP    NOT NULL,
  modified_at        TIMESTAMP    NOT NULL,
  CONSTRAINT PK_NOTIFITION PRIMARY KEY (notifition_seq_id)
);

CREATE SEQUENCE SEQ_NOTIFITION
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER SEQ_TRG_NOTIFITION
BEFORE INSERT ON NOTIFITION
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
  SELECT SEQ_NOTIFITION.NEXTVAL
  INTO: NEW.notifition_seq_id
  FROM DUAL;
END;

COMMENT ON COLUMN NOTIFITION.notifition_seq_id IS '게시글고유번호(SEQ)';

COMMENT ON COLUMN NOTIFITION.admin_id IS '관리자아이디';

COMMENT ON COLUMN NOTIFITION.notifition_title IS '게시글제목';

COMMENT ON COLUMN NOTIFITION.notifition_content IS '게시글 내용';

COMMENT ON COLUMN NOTIFITION.created_at IS '게시글 작성시간';

COMMENT ON COLUMN NOTIFITION.modified_at IS '게시글 수정시간';

CREATE TABLE ORDER_PRODUCT
(
  order_product_id NUMBER NOT NULL,
  order_id         NUMBER NOT NULL,
  product_seq_id   NUMBER NOT NULL,
  count            NUMBER NOT NULL,
  CONSTRAINT PK_ORDER_PRODUCT PRIMARY KEY (order_product_id)
);

CREATE SEQUENCE SEQ_ORDER_PRODUCT
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER SEQ_TRG_ORDER_PRODUCT
BEFORE INSERT ON ORDER_PRODUCT
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
  SELECT SEQ_ORDER_PRODUCT.NEXTVAL
  INTO: NEW.order_product_id
  FROM DUAL;
END;

COMMENT ON COLUMN ORDER_PRODUCT.order_product_id IS '상세상품번호';

COMMENT ON COLUMN ORDER_PRODUCT.order_id IS '주문번호';

COMMENT ON COLUMN ORDER_PRODUCT.product_seq_id IS '상품고유번호';

COMMENT ON COLUMN ORDER_PRODUCT.count IS '주문 수량';

CREATE TABLE ORDERS
(
  order_id       NUMBER       NOT NULL,
  cart_seq_id    NUMBER       NOT NULL,
  user_email     VARCHAR(255) NOT NULL,
  invoice_number NUMBER      ,
  amount         NUMBER      ,
  cancellation   CHAR(1)      DEFAULT 'F',
  create_at      TIMESTAMP   ,
  modified_at    TIMESTAMP    NOT NULL,
  order_success  CHAR(1)      DEFAULT 'F',
  CONSTRAINT PK_ORDERS PRIMARY KEY (order_id)
);

CREATE SEQUENCE SEQ_ORDERS
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER SEQ_TRG_ORDERS
BEFORE INSERT ON ORDERS
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
  SELECT SEQ_ORDERS.NEXTVAL
  INTO: NEW.order_id
  FROM DUAL;
END;

COMMENT ON COLUMN ORDERS.order_id IS '주문고유번호';

COMMENT ON COLUMN ORDERS.cart_seq_id IS '장바구니고유번호(SEQ)';

COMMENT ON COLUMN ORDERS.user_email IS '유저이메일';

COMMENT ON COLUMN ORDERS.invoice_number IS '송장번호';

COMMENT ON COLUMN ORDERS.amount IS '총금액';

COMMENT ON COLUMN ORDERS.cancellation IS '취소여부';

COMMENT ON COLUMN ORDERS.create_at IS '생성일시';

COMMENT ON COLUMN ORDERS.modified_at IS '수정일시';

COMMENT ON COLUMN ORDERS.order_success IS '주문성공여부';

CREATE TABLE PREPARED_RECIPE
(
  recipe_id         NUMBER       NOT NULL,
  category_id       NUMBER       NOT NULL,
  recipe_title      VARCHAR(200),
  recipe_ingredient VARCHAR(200),
  views             NUMBER      ,
  recipe_time       VARCHAR(200),
  recipe_level      VARCHAR(200),
  serving_dish      VARCHAR(200),
  admin_inspection  CHAR(1)      DEFAULT 'F',
  created_at        TIMESTAMP    NOT NULL,
  modified_at       TIMESTAMP    NOT NULL,
  CONSTRAINT PK_PREPARED_RECIPE PRIMARY KEY (recipe_id)
);

COMMENT ON COLUMN PREPARED_RECIPE.recipe_id IS '레시피 고유번호';

COMMENT ON COLUMN PREPARED_RECIPE.category_id IS '카테고리 고유번호';

COMMENT ON COLUMN PREPARED_RECIPE.recipe_title IS '레시피제목';

COMMENT ON COLUMN PREPARED_RECIPE.recipe_ingredient IS '레시피제료';

COMMENT ON COLUMN PREPARED_RECIPE.views IS '조회수';

COMMENT ON COLUMN PREPARED_RECIPE.recipe_time IS '조리시간';

COMMENT ON COLUMN PREPARED_RECIPE.recipe_level IS '조리난이도';

COMMENT ON COLUMN PREPARED_RECIPE.serving_dish IS '요리인분수';

COMMENT ON COLUMN PREPARED_RECIPE.admin_inspection IS '관리자검수';

COMMENT ON COLUMN PREPARED_RECIPE.created_at IS '생성일시';

COMMENT ON COLUMN PREPARED_RECIPE.modified_at IS '수정일시';

CREATE TABLE PREPARED_RECIPE_ALLERGY
(
  recipe_id  NUMBER NOT NULL,
  allergy_id NUMBER NOT NULL
);

COMMENT ON COLUMN PREPARED_RECIPE_ALLERGY.recipe_id IS '레시피고유번호';

COMMENT ON COLUMN PREPARED_RECIPE_ALLERGY.allergy_id IS '알러지고유번호';

CREATE TABLE PREPARED_RECIPE_COMMENT
(
  prepared_recipe_comment_id NUMBER       NOT NULL,
  parent_comment_id          NUMBER       NOT NULL,
  recipe_id                  NUMBER       NOT NULL,
  user_email                 VARCHAR(255) NOT NULL,
  comment_depth              NUMBER       NOT NULL,
  content                    NCLOB       ,
  create_at                  TIMESTAMP    NOT NULL,
  modified_at                TIMESTAMP    NOT NULL,
  admin_inspection           CHAR(1)      DEFAULT 'F' NOT NULL,
  CONSTRAINT PK_PREPARED_RECIPE_COMMENT PRIMARY KEY (prepared_recipe_comment_id)
);

CREATE SEQUENCE SEQ_PREPARED_RECIPE_COMMENT
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER SEQ_TRG_PREPARED_RECIPE_COMMENT
BEFORE INSERT ON PREPARED_RECIPE_COMMENT
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
  SELECT SEQ_PREPARED_RECIPE_COMMENT.NEXTVAL
  INTO: NEW.prepared_recipe_comment_id
  FROM DUAL;
END;

COMMENT ON COLUMN PREPARED_RECIPE_COMMENT.prepared_recipe_comment_id IS '댓글고유번호';

COMMENT ON COLUMN PREPARED_RECIPE_COMMENT.parent_comment_id IS '대댓글고유번호';

COMMENT ON COLUMN PREPARED_RECIPE_COMMENT.recipe_id IS '레시피고유번호';

COMMENT ON COLUMN PREPARED_RECIPE_COMMENT.user_email IS '유저이메일';

COMMENT ON COLUMN PREPARED_RECIPE_COMMENT.comment_depth IS '댓글단계';

COMMENT ON COLUMN PREPARED_RECIPE_COMMENT.content IS '내용';

COMMENT ON COLUMN PREPARED_RECIPE_COMMENT.create_at IS '생성일시';

COMMENT ON COLUMN PREPARED_RECIPE_COMMENT.modified_at IS '수정일시';

COMMENT ON COLUMN PREPARED_RECIPE_COMMENT.admin_inspection IS '관리자검수';

CREATE TABLE PREPARED_RECIPE_COMMENT_REACTION
(
  comment_id NUMBER       NOT NULL,
  user_email VARCHAR(255) NOT NULL,
  reaction   VARCHAR(100)
);

CREATE SEQUENCE SEQ_PREPARED_RECIPE_COMMENT_REACTION
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER SEQ_TRG_PREPARED_RECIPE_COMMENT_REACTION
BEFORE INSERT ON PREPARED_RECIPE_COMMENT_REACTION
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
  SELECT SEQ_PREPARED_RECIPE_COMMENT_REACTION.NEXTVAL
  INTO: NEW.comment_id
  FROM DUAL;
END;

COMMENT ON COLUMN PREPARED_RECIPE_COMMENT_REACTION.comment_id IS '댓글고유번호';

COMMENT ON COLUMN PREPARED_RECIPE_COMMENT_REACTION.user_email IS '유저이메일';

COMMENT ON COLUMN PREPARED_RECIPE_COMMENT_REACTION.reaction IS '좋아요/싫어요';

CREATE TABLE PREPARED_RECIPE_REACTION
(
  recipe_id  NUMBER       NOT NULL,
  user_email VARCHAR(255) NOT NULL,
  reaction   VARCHAR(100) NOT NULL
);

COMMENT ON COLUMN PREPARED_RECIPE_REACTION.recipe_id IS '레시피고유번호';

COMMENT ON COLUMN PREPARED_RECIPE_REACTION.user_email IS '유저이메일';

COMMENT ON COLUMN PREPARED_RECIPE_REACTION.reaction IS '좋아요/싫어요';

CREATE TABLE PRODUCT
(
  product_seq_id   NUMBER         NOT NULL,
  business_number  VARCHAR(100)   NOT NULL,
  product_name     VARCHAR2(100)  NOT NULL,
  price            NUMBER        ,
  stock            NUMBER        ,
  claims_num       NUMBER         NOT NULL,
  create_at        TIMESTAMP      NOT NULL,
  modified_at      TIMESTAMP      NOT NULL,
  admin_inspection CHAR(1)        DEFAULT 'F',
  tag              VARCHAR2(1000),
  CONSTRAINT PK_PRODUCT PRIMARY KEY (product_seq_id)
);

CREATE SEQUENCE SEQ_PRODUCT
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER SEQ_TRG_PRODUCT
BEFORE INSERT ON PRODUCT
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
  SELECT SEQ_PRODUCT.NEXTVAL
  INTO: NEW.product_seq_id
  FROM DUAL;
END;

COMMENT ON COLUMN PRODUCT.product_seq_id IS '상품고유번호';

COMMENT ON COLUMN PRODUCT.business_number IS '사업자등록번호';

COMMENT ON COLUMN PRODUCT.product_name IS '제품명';

COMMENT ON COLUMN PRODUCT.price IS '제품가격';

COMMENT ON COLUMN PRODUCT.stock IS '재고량';

COMMENT ON COLUMN PRODUCT.claims_num IS '클레임횟수(경고)';

COMMENT ON COLUMN PRODUCT.create_at IS '상품생성일시';

COMMENT ON COLUMN PRODUCT.modified_at IS '상품수정일시';

COMMENT ON COLUMN PRODUCT.admin_inspection IS '관리자검수';

COMMENT ON COLUMN PRODUCT.tag IS '검색태그명';

CREATE TABLE PRODUCT_ALLERGY
(
  product_seq_id NUMBER NOT NULL,
  allergy_id     NUMBER NOT NULL
);

COMMENT ON COLUMN PRODUCT_ALLERGY.product_seq_id IS '상품고유번호';

COMMENT ON COLUMN PRODUCT_ALLERGY.allergy_id IS '알러지고유번호';

CREATE TABLE PRODUCT_COMMENT
(
  product_comment_seq_id NUMBER       NOT NULL,
  product_id             NUMBER       NOT NULL,
  client_comment_id      NUMBER       NOT NULL,
  user_email             VARCHAR(255) NOT NULL,
  business_number        VARCHAR(100) NOT NULL,
  create_at              TIMESTAMP   ,
  modified_at            TIMESTAMP   ,
  CONSTRAINT PK_PRODUCT_COMMENT PRIMARY KEY (product_comment_seq_id)
);

CREATE SEQUENCE SEQ_PRODUCT_COMMENT
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER SEQ_TRG_PRODUCT_COMMENT
BEFORE INSERT ON PRODUCT_COMMENT
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
  SELECT SEQ_PRODUCT_COMMENT.NEXTVAL
  INTO: NEW.product_comment_seq_id
  FROM DUAL;
END;

COMMENT ON COLUMN PRODUCT_COMMENT.user_email IS '유저이메일(varchar2(1000))';

COMMENT ON COLUMN PRODUCT_COMMENT.business_number IS '사업자등록번호';

CREATE TABLE QUESTION
(
  question_seq_id NUMBER       NOT NULL,
  user_email      VARCHAR(255) NOT NULL,
  content         NCLOB       ,
  create_at       TIMESTAMP    NOT NULL,
  modified_at     TIMESTAMP    NOT NULL,
  CONSTRAINT PK_QUESTION PRIMARY KEY (question_seq_id)
);

CREATE SEQUENCE SEQ_QUESTION
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER SEQ_TRG_QUESTION
BEFORE INSERT ON QUESTION
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
  SELECT SEQ_QUESTION.NEXTVAL
  INTO: NEW.question_seq_id
  FROM DUAL;
END;

COMMENT ON COLUMN QUESTION.question_seq_id IS '질문고유번호(SEQ)';

COMMENT ON COLUMN QUESTION.user_email IS '유저이메일';

COMMENT ON COLUMN QUESTION.content IS '질문내용';

COMMENT ON COLUMN QUESTION.create_at IS '생성일시';

COMMENT ON COLUMN QUESTION.modified_at IS '수정일시';

CREATE TABLE RECIPE
(
  recipe_seq_id     NUMBER        NOT NULL,
  category_id       NUMBER        NOT NULL,
  recipe_title      VARCHAR(200)  NOT NULL,
  recipe_ingredient VARCHAR(2000) NOT NULL,
  views             NUMBER        DEFAULT 1 NOT NULL,
  recipe_time       VARCHAR(200)  NOT NULL,
  recipe_level      VARCHAR(200)  NOT NULL,
  serving_dish      VARCHAR(200)  NOT NULL,
  admin_inspection  CHAR(1)       DEFAULT 'F',
  created_at        TIMESTAMP     NOT NULL,
  modified_at       TIMESTAMP     NOT NULL,
  thumb_url         VARCHAR2(500),
  CONSTRAINT PK_RECIPE PRIMARY KEY (recipe_seq_id)
);

CREATE SEQUENCE SEQ_RECIPE
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER SEQ_TRG_RECIPE
BEFORE INSERT ON RECIPE
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
  SELECT SEQ_RECIPE.NEXTVAL
  INTO: NEW.recipe_seq_id
  FROM DUAL;
END;

COMMENT ON COLUMN RECIPE.recipe_seq_id IS '레시피 고유번호';

COMMENT ON COLUMN RECIPE.category_id IS '카테고리 고유번호';

COMMENT ON COLUMN RECIPE.recipe_title IS '레시피 제목';

COMMENT ON COLUMN RECIPE.recipe_ingredient IS '레시피 재료';

COMMENT ON COLUMN RECIPE.views IS '조회수';

COMMENT ON COLUMN RECIPE.recipe_time IS '조리시간';

COMMENT ON COLUMN RECIPE.recipe_level IS '조리난이도';

COMMENT ON COLUMN RECIPE.serving_dish IS '요리인분수';

COMMENT ON COLUMN RECIPE.admin_inspection IS '관리자검수';

COMMENT ON COLUMN RECIPE.created_at IS '생성일시';

COMMENT ON COLUMN RECIPE.modified_at IS '수정일시';

COMMENT ON COLUMN RECIPE.thumb_url IS '이미지링크';

CREATE TABLE RECIPE_ALLERGY
(
  allergy_id    NUMBER NOT NULL,
  recipe_seq_id NUMBER NOT NULL
);

COMMENT ON COLUMN RECIPE_ALLERGY.allergy_id IS '알러지고유번호';

COMMENT ON COLUMN RECIPE_ALLERGY.recipe_seq_id IS '레시피 고유번호';

CREATE TABLE RECIPE_CATEGORY
(
  category_id   NUMBER       NOT NULL,
  category_name VARCHAR(100) NOT NULL,
  CONSTRAINT PK_RECIPE_CATEGORY PRIMARY KEY (category_id)
);

COMMENT ON COLUMN RECIPE_CATEGORY.category_id IS '카테고리고유번호';

COMMENT ON COLUMN RECIPE_CATEGORY.category_name IS '카테고리명';

CREATE TABLE RECIPE_COMMENT_REACTION
(
  comment_id NUMBER       NOT NULL,
  user_email VARCHAR(255) NOT NULL,
  reaction   VARCHAR(100)
);

COMMENT ON COLUMN RECIPE_COMMENT_REACTION.comment_id IS '댓글순번';

COMMENT ON COLUMN RECIPE_COMMENT_REACTION.user_email IS '유저이메일';

COMMENT ON COLUMN RECIPE_COMMENT_REACTION.reaction IS '좋아요/싫어요';

CREATE TABLE RECIPE_REACTION
(
  user_email    VARCHAR(255) NOT NULL,
  recipe_seq_id NUMBER       NOT NULL,
  reaction      VARCHAR(100)
);

COMMENT ON COLUMN RECIPE_REACTION.user_email IS '유저이메일';

COMMENT ON COLUMN RECIPE_REACTION.recipe_seq_id IS '레시피 고유번호';

COMMENT ON COLUMN RECIPE_REACTION.reaction IS '좋아요/싫어요';

CREATE TABLE RECPIE_COMMENT
(
  recipe_comment_id NUMBER       NOT NULL,
  user_email        VARCHAR(255) NOT NULL,
  recipe_seq_id     NUMBER       NOT NULL,
  parent_comment_id NUMBER       NOT NULL,
  comment_depth     NUMBER       NOT NULL,
  content           NCLOB       ,
  create_at         TIMESTAMP    NOT NULL,
  modified_at       TIMESTAMP    NOT NULL,
  admin_inspection  CHAR(1)      DEFAULT 'F' NOT NULL,
  CONSTRAINT PK_RECPIE_COMMENT PRIMARY KEY (recipe_comment_id)
);

CREATE SEQUENCE SEQ_RECPIE_COMMENT
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER SEQ_TRG_RECPIE_COMMENT
BEFORE INSERT ON RECPIE_COMMENT
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
  SELECT SEQ_RECPIE_COMMENT.NEXTVAL
  INTO: NEW.recipe_comment_id
  FROM DUAL;
END;

COMMENT ON COLUMN RECPIE_COMMENT.recipe_comment_id IS '댓글고유번호';

COMMENT ON COLUMN RECPIE_COMMENT.user_email IS '유저이메일';

COMMENT ON COLUMN RECPIE_COMMENT.recipe_seq_id IS '레시피 고유번호';

COMMENT ON COLUMN RECPIE_COMMENT.parent_comment_id IS '대댓글';

COMMENT ON COLUMN RECPIE_COMMENT.comment_depth IS '댓글단계';

COMMENT ON COLUMN RECPIE_COMMENT.content IS '댓글내용';

COMMENT ON COLUMN RECPIE_COMMENT.create_at IS '생성일시';

COMMENT ON COLUMN RECPIE_COMMENT.modified_at IS '수정일시';

COMMENT ON COLUMN RECPIE_COMMENT.admin_inspection IS '관리자검수';

CREATE TABLE USER_ADDRESS
(
  user_email     VARCHAR(255)   NOT NULL,
  user_address1  VARCHAR2(1000),
  user_address2  VARCHAR2(1000),
  user_post_code VARCHAR2(1000)
);

COMMENT ON COLUMN USER_ADDRESS.user_email IS '유저이메일';

COMMENT ON COLUMN USER_ADDRESS.user_address1 IS '기본주소';

COMMENT ON COLUMN USER_ADDRESS.user_address2 IS '상세주소';

COMMENT ON COLUMN USER_ADDRESS.user_post_code IS '우편번호';

CREATE TABLE USERS
(
  user_email         VARCHAR(255)   NOT NULL,
  user_birthday      DATE           NOT NULL,
  user_name          VARCHAR(20)    NOT NULL,
  user_phone         VARCHAR(20)    NOT NULL,
  create_at          TIMESTAMP      NOT NULL,
  modified_at        TIMESTAMP      NOT NULL,
  account_activation CHAR(1)        DEFAULT 'T' NOT NULL,
  user_allergy       VARCHAR2(1000),
  user_profile_url   NCLOB         ,
  CONSTRAINT PK_USERS PRIMARY KEY (user_email)
);

COMMENT ON COLUMN USERS.user_email IS '유저이메일';

COMMENT ON COLUMN USERS.user_birthday IS '유저생일';

COMMENT ON COLUMN USERS.user_name IS '유저이름';

COMMENT ON COLUMN USERS.user_phone IS '유저 연락처';

COMMENT ON COLUMN USERS.create_at IS '생성일시';

COMMENT ON COLUMN USERS.modified_at IS '수정일시';

COMMENT ON COLUMN USERS.account_activation IS '계정활성화여부';

CREATE TABLE VISITOR_LOG
(
  user_ip     VARCHAR(255) NOT NULL,
  access_time TIMESTAMP    NOT NULL
);

COMMENT ON COLUMN VISITOR_LOG.user_ip IS '방문자';

COMMENT ON COLUMN VISITOR_LOG.access_time IS '연결 시각';

ALTER TABLE KAKAO
  ADD CONSTRAINT FK_USERS_TO_KAKAO
    FOREIGN KEY (user_email)
    REFERENCES USERS (user_email);

ALTER TABLE COMMON_USER
  ADD CONSTRAINT FK_USERS_TO_COMMON_USER
    FOREIGN KEY (user_email)
    REFERENCES USERS (user_email);

ALTER TABLE USER_ADDRESS
  ADD CONSTRAINT FK_USERS_TO_USER_ADDRESS
    FOREIGN KEY (user_email)
    REFERENCES USERS (user_email);

ALTER TABLE RECIPE_REACTION
  ADD CONSTRAINT FK_USERS_TO_RECIPE_REACTION
    FOREIGN KEY (user_email)
    REFERENCES USERS (user_email);

ALTER TABLE NAVER
  ADD CONSTRAINT FK_USERS_TO_NAVER
    FOREIGN KEY (user_email)
    REFERENCES USERS (user_email);

ALTER TABLE RECPIE_COMMENT
  ADD CONSTRAINT FK_USERS_TO_RECPIE_COMMENT
    FOREIGN KEY (user_email)
    REFERENCES USERS (user_email);

ALTER TABLE PRODUCT_COMMENT
  ADD CONSTRAINT FK_PRODUCT_TO_PRODUCT_COMMENT
    FOREIGN KEY (product_id)
    REFERENCES PRODUCT (product_seq_id);

ALTER TABLE RECPIE_COMMENT
  ADD CONSTRAINT FK_RECPIE_COMMENT_TO_RECPIE_COMMENT
    FOREIGN KEY (parent_comment_id)
    REFERENCES RECPIE_COMMENT (recipe_comment_id);

ALTER TABLE CLIENT_COMMENT_REPLY
  ADD CONSTRAINT FK_CLIENT_TO_CLIENT_COMMENT_REPLY
    FOREIGN KEY (business_number)
    REFERENCES CLIENT (business_number);

ALTER TABLE PRODUCT_COMMENT
  ADD CONSTRAINT FK_CLIENT_COMMENT_REPLY_TO_PRODUCT_COMMENT
    FOREIGN KEY (client_comment_id)
    REFERENCES CLIENT_COMMENT_REPLY (client_comment_id);

ALTER TABLE PRODUCT
  ADD CONSTRAINT FK_CLIENT_TO_PRODUCT
    FOREIGN KEY (business_number)
    REFERENCES CLIENT (business_number);

ALTER TABLE PRODUCT_COMMENT
  ADD CONSTRAINT FK_USERS_TO_PRODUCT_COMMENT
    FOREIGN KEY (user_email)
    REFERENCES USERS (user_email);

ALTER TABLE NOTIFITION
  ADD CONSTRAINT FK_ADMIN_TO_NOTIFITION
    FOREIGN KEY (admin_id)
    REFERENCES ADMIN (admin_id);

ALTER TABLE CART
  ADD CONSTRAINT FK_PRODUCT_TO_CART
    FOREIGN KEY (product_id)
    REFERENCES PRODUCT (product_seq_id);

ALTER TABLE CART
  ADD CONSTRAINT FK_USERS_TO_CART
    FOREIGN KEY (user_email)
    REFERENCES USERS (user_email);

ALTER TABLE ANSWER
  ADD CONSTRAINT FK_QUESTION_TO_ANSWER
    FOREIGN KEY (question_seq_id)
    REFERENCES QUESTION (question_seq_id);

ALTER TABLE QUESTION
  ADD CONSTRAINT FK_USERS_TO_QUESTION
    FOREIGN KEY (user_email)
    REFERENCES USERS (user_email);

ALTER TABLE ORDERS
  ADD CONSTRAINT FK_USERS_TO_ORDERS
    FOREIGN KEY (user_email)
    REFERENCES USERS (user_email);

ALTER TABLE ORDERS
  ADD CONSTRAINT FK_CART_TO_ORDERS
    FOREIGN KEY (cart_seq_id)
    REFERENCES CART (cart_seq_id);

ALTER TABLE ANSWER
  ADD CONSTRAINT FK_ADMIN_TO_ANSWER
    FOREIGN KEY (admin_id)
    REFERENCES ADMIN (admin_id);

ALTER TABLE RECIPE_ALLERGY
  ADD CONSTRAINT FK_ALLERGY_TO_RECIPE_ALLERGY
    FOREIGN KEY (allergy_id)
    REFERENCES ALLERGY (allergy_id);

ALTER TABLE ORDER_PRODUCT
  ADD CONSTRAINT FK_ORDERS_TO_ORDER_PRODUCT
    FOREIGN KEY (order_id)
    REFERENCES ORDERS (order_id);

ALTER TABLE RECIPE
  ADD CONSTRAINT FK_RECIPE_CATEGORY_TO_RECIPE
    FOREIGN KEY (category_id)
    REFERENCES RECIPE_CATEGORY (category_id);

ALTER TABLE PREPARED_RECIPE
  ADD CONSTRAINT FK_RECIPE_CATEGORY_TO_PREPARED_RECIPE
    FOREIGN KEY (category_id)
    REFERENCES RECIPE_CATEGORY (category_id);

ALTER TABLE PREPARED_RECIPE_COMMENT
  ADD CONSTRAINT FK_PREPARED_RECIPE_COMMENT_TO_PREPARED_RECIPE_COMMENT
    FOREIGN KEY (parent_comment_id)
    REFERENCES PREPARED_RECIPE_COMMENT (prepared_recipe_comment_id, comment_depth);

ALTER TABLE PREPARED_RECIPE_COMMENT
  ADD CONSTRAINT FK_PREPARED_RECIPE_TO_PREPARED_RECIPE_COMMENT
    FOREIGN KEY (recipe_id)
    REFERENCES PREPARED_RECIPE (recipe_id);

ALTER TABLE PREPARED_RECIPE_COMMENT
  ADD CONSTRAINT FK_USERS_TO_PREPARED_RECIPE_COMMENT
    FOREIGN KEY (user_email)
    REFERENCES USERS (user_email);

ALTER TABLE PREPARED_RECIPE_REACTION
  ADD CONSTRAINT FK_PREPARED_RECIPE_TO_PREPARED_RECIPE_REACTION
    FOREIGN KEY (recipe_id)
    REFERENCES PREPARED_RECIPE (recipe_id);

ALTER TABLE PREPARED_RECIPE_REACTION
  ADD CONSTRAINT FK_USERS_TO_PREPARED_RECIPE_REACTION
    FOREIGN KEY (user_email)
    REFERENCES USERS (user_email);

ALTER TABLE RECIPE_COMMENT_REACTION
  ADD CONSTRAINT FK_RECPIE_COMMENT_TO_RECIPE_COMMENT_REACTION
    FOREIGN KEY (comment_id)
    REFERENCES RECPIE_COMMENT (recipe_comment_id);

ALTER TABLE RECIPE_COMMENT_REACTION
  ADD CONSTRAINT FK_USERS_TO_RECIPE_COMMENT_REACTION
    FOREIGN KEY (user_email)
    REFERENCES USERS (user_email);

ALTER TABLE PREPARED_RECIPE_COMMENT_REACTION
  ADD CONSTRAINT FK_PREPARED_RECIPE_COMMENT_TO_PREPARED_RECIPE_COMMENT_REACTION
    FOREIGN KEY (comment_id)
    REFERENCES PREPARED_RECIPE_COMMENT (prepared_recipe_comment_id);

ALTER TABLE PREPARED_RECIPE_COMMENT_REACTION
  ADD CONSTRAINT FK_USERS_TO_PREPARED_RECIPE_COMMENT_REACTION
    FOREIGN KEY (user_email)
    REFERENCES USERS (user_email);

ALTER TABLE PREPARED_RECIPE_ALLERGY
  ADD CONSTRAINT FK_PREPARED_RECIPE_TO_PREPARED_RECIPE_ALLERGY
    FOREIGN KEY (recipe_id)
    REFERENCES PREPARED_RECIPE (recipe_id);

ALTER TABLE PREPARED_RECIPE_ALLERGY
  ADD CONSTRAINT FK_ALLERGY_TO_PREPARED_RECIPE_ALLERGY
    FOREIGN KEY (allergy_id)
    REFERENCES ALLERGY (allergy_id);

ALTER TABLE GOOGLE
  ADD CONSTRAINT FK_USERS_TO_GOOGLE
    FOREIGN KEY (user_email)
    REFERENCES USERS (user_email);

ALTER TABLE ORDER_PRODUCT
  ADD CONSTRAINT FK_PRODUCT_TO_ORDER_PRODUCT
    FOREIGN KEY (product_seq_id)
    REFERENCES PRODUCT (product_seq_id);

ALTER TABLE RECIPE_ALLERGY
  ADD CONSTRAINT FK_RECIPE_TO_RECIPE_ALLERGY
    FOREIGN KEY (recipe_seq_id)
    REFERENCES RECIPE (recipe_seq_id);

ALTER TABLE RECPIE_COMMENT
  ADD CONSTRAINT FK_RECIPE_TO_RECPIE_COMMENT
    FOREIGN KEY (recipe_seq_id)
    REFERENCES RECIPE (recipe_seq_id);

ALTER TABLE RECIPE_REACTION
  ADD CONSTRAINT FK_RECIPE_TO_RECIPE_REACTION
    FOREIGN KEY (recipe_seq_id)
    REFERENCES RECIPE (recipe_seq_id);

ALTER TABLE PRODUCT_ALLERGY
  ADD CONSTRAINT FK_PRODUCT_TO_PRODUCT_ALLERGY
    FOREIGN KEY (product_seq_id)
    REFERENCES PRODUCT (product_seq_id);

ALTER TABLE PRODUCT_ALLERGY
  ADD CONSTRAINT FK_ALLERGY_TO_PRODUCT_ALLERGY
    FOREIGN KEY (allergy_id)
    REFERENCES ALLERGY (allergy_id);
